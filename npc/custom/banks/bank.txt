//Le Livre d'Ymir http://www.bookofymir.net/
//traduit par Myllena
//===== eAthena Script ======================================= 
//= Banker Script 
//===== By: ================================================== 
//= Syrus22 (1.0)
//===== Current Version: ===================================== 
//= 1.0
//===== Compatible With: ===================================== 
//= Any eAthena version with Account variables.
//===== Description: ========================================= 
//= An account wide Banker to store Zeny
//===== Additional Comments: ================================= 
//= Syrus22 - There's an optional transaction fee at the top of
//= the script. To use it simply change the first set command
//= to set the cost variable to whatever you want the fee to be.
//============================================================ 
prontera,132,217,5	script	Banquier	109,{
set @cost,500;
mes "[Banquier]";
mes "Bienvenue à la Banque de Prontera. En quoi puis-je vous aider?";
next;
menu "J'aimerais effectuer un dépôt.",Ldeposit,"J'aimerais effectuer un retrait.",Lwithdrawl,"Quel est l'état actuel de mon compte?",Lbalance,"Rien, merci.",Lcancel;

Ldeposit:
	mes "[Banquier]";
	mes "Très bien... Combien souhaitez-vous déposer? Vous pouvez déposer au maximum 999 999 Zenys à la fois.";
	next;
	if (@cost > 0) goto Ldepocost;
	goto Ldepocont;

	Ldepocost:
		mes "[Banquier]";
		mes "Oh, et il y a " + @cost + " zenys de taxe pour chaque transaction.";
		next;
		goto Ldepocont;

Ldepocont:
	input @deposit;
	if (@deposit < 1) goto Lrealamount;
	if (@deposit > Zeny) goto Lneedzeny;
	if (@deposit > (Zeny - @cost)) goto Lneedzeny2;
	set Zeny,Zeny - @deposit;
	set Zeny,Zeny - @cost;
	set #bankstorage,#bankstorage + @deposit;
	mes "[Banquier]";
	mes "Merci beaucoup... Vos Zenys sont en de bonnes mains.";
	close;

Lwithdrawl:
	mes "[Banquier]";
	mes "Très bien... Combien souhaitez-vous retirer? Vous pouvez retirer au maximum 999 999 Zenys à la fois.";
	next;
	if (@cost > 0) goto Lwithcost;
	goto Lwithcont;

	Lwithcost:
		mes "[Banquier]";
		mes "Oh, et il y a " + @cost + " zenys de taxe pour chaque transaction.";
		next;
		goto Lwithcont;

Lwithcont:
	input @withdrawl;
	if (@withdrawl < 1) goto Lrealamount;
	if (@withdrawl > #bankstorage) goto Lneedzeny3;
	if ((@cost > Zeny) && ((Zeny + @withdrawl) > @cost)) goto Lcostask; 
	if (@cost > Zeny) goto Lneedzeny2;
	goto Lwithcont2;

	Lcostask:
		mes "[Banquier]";
		mes "Vous n'avez pas assez de Zenys pour payer la taxe de transaction. Voulez-vous que je retire cette taxe directement de votre retrait?";
		next;
		menu "Oui, s'il vous plaît.",Lwithtake,"Non, merci.",Lcancel;

	Lwithtake:
		mes "[Banquier]";
		mes "Très bien.";
		set @withdrawl,@withdrawl - @cost;
		set #bankstorage,#bankstorage - @cost;
		set @cost,0;
		next;
		goto Lwithcont2;

Lwithcont2:
	set Zeny,Zeny - @cost;
	set Zeny,Zeny + @withdrawl;
	set #bankstorage,#bankstorage - @withdrawl;
	mes "[Banquier]";
	mes "Voici vos Zenys. Passez une bonne "+ ( isday() ? "journée" : "soirée" ) +".";
	close;

Lbalance:
	mes "[Banquier]";
	mes "Hum, laissez-moi consulter votre dossier...";
	next;
	mes "*Fouille, Fouille*";
	next;
	mes "[Banquier]";
	mes "Vous avez actuellement " + #bankstorage + " Zenys sur votre compte.";
	close;

Lrealamount:
	mes "[Banquier]";
	mes "Les plaisanteries sont malvenues. La prochaine fois, entrez un montant correct.";
	close;

Lneedzeny:
	mes "[Banquier]";
	mes "Vous n'avez pas assez de Zenys pour effectuer ce dépôt.";
	close;

Lneedzeny2:
	mes "[Banquier]";
	mes "Vous n'avez pas assez de Zenys pour payer la taxe de transaction.";
	close;

Lneedzeny3:
	mes "[Banquier]";
	mes "Vous n'avez pas assez de Zenys sur votre compte.";
	close;

Lcancel:
	mes "[Banquier]";
	mes "Très bien... A bientôt.";
	close;
}
